// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: depute.proto

package depute

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	NotifyContent(ctx context.Context, opts ...grpc.CallOption) (Publisher_NotifyContentClient, error)
	Publish(ctx context.Context, in *Publish_Request, opts ...grpc.CallOption) (*Publish_Response, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) NotifyContent(ctx context.Context, opts ...grpc.CallOption) (Publisher_NotifyContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Publisher_ServiceDesc.Streams[0], "/ipni.depute.v0.Publisher/NotifyContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &publisherNotifyContentClient{stream}
	return x, nil
}

type Publisher_NotifyContentClient interface {
	Send(*NotifyContent_Request) error
	CloseAndRecv() (*NotifyContent_Response, error)
	grpc.ClientStream
}

type publisherNotifyContentClient struct {
	grpc.ClientStream
}

func (x *publisherNotifyContentClient) Send(m *NotifyContent_Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publisherNotifyContentClient) CloseAndRecv() (*NotifyContent_Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NotifyContent_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publisherClient) Publish(ctx context.Context, in *Publish_Request, opts ...grpc.CallOption) (*Publish_Response, error) {
	out := new(Publish_Response)
	err := c.cc.Invoke(ctx, "/ipni.depute.v0.Publisher/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations should embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	NotifyContent(Publisher_NotifyContentServer) error
	Publish(context.Context, *Publish_Request) (*Publish_Response, error)
}

// UnimplementedPublisherServer should be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) NotifyContent(Publisher_NotifyContentServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyContent not implemented")
}
func (UnimplementedPublisherServer) Publish(context.Context, *Publish_Request) (*Publish_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s grpc.ServiceRegistrar, srv PublisherServer) {
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_NotifyContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublisherServer).NotifyContent(&publisherNotifyContentServer{stream})
}

type Publisher_NotifyContentServer interface {
	SendAndClose(*NotifyContent_Response) error
	Recv() (*NotifyContent_Request, error)
	grpc.ServerStream
}

type publisherNotifyContentServer struct {
	grpc.ServerStream
}

func (x *publisherNotifyContentServer) SendAndClose(m *NotifyContent_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publisherNotifyContentServer) Recv() (*NotifyContent_Request, error) {
	m := new(NotifyContent_Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Publish_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipni.depute.v0.Publisher/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).Publish(ctx, req.(*Publish_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Publisher_ServiceDesc is the grpc.ServiceDesc for Publisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipni.depute.v0.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyContent",
			Handler:       _Publisher_NotifyContent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "depute.proto",
}
